c)
xmlzipcode(rootNode)
library(XML)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileurl, useinternal = TRUE)
rootNode <- xmlRoot(doc)
xmlzipcode(rootNode)
library(XML)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileurl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlzipcode(rootNode)
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- xmlParse(xData)
zipcodes <- xpathSApply(doc,"//li[@class='zipcode']", xmlvalue)
zipcodes <- xpathSApply(doc,"//li[@zipcode ='21231']", xmlvalue)
zipcodes <- xpathSApply(doc,"/[zipcode ='21231']/zipcode", xmlvalue)
zipcodes <- xpathSApply(doc,"/[zipcode ="21231"]/zipcode", xmlvalue)
zipcodes <- xpathSApply(doc,"/[zipcode =21231]/zipcode", xmlvalue)
zipcodes <- xpathSApply(doc,"/[zipcode =21231]/zipcode", xmlValue)
zipcodes <- xpathSApply(doc,"//[zipcode =21231]/zipcode", xmlValue)
zipcodes <- xpathSApply(doc,"//li[@zipcode = "21231"]", xmlValue)
zipcodes <- xpathSApply(doc,"//li[@zipcode = 21231]", xmlValue)
zipcodes
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- xmlParse(xData)
zipcodes <- xpathSApply(doc,"//li[@zipcode = 21231]", xmlValue)
zipcodes
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- xmlParse(xData)
zipcodes <- xpathSApply(doc,"//li[@zipcode = '21231']", xmlValue)
zipcodes
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- xmlParse(xData)
zipcodes <- xpathSApply(doc,"//li[@class = 'zipcode']", xmlValue)
zipcodes
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- htmlTreeParse(xData)
zipcodes <- xpathSApply(doc,"//li[@class = 'zipcode']", xmlValue)
zipcodes
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- htmlParse(xData)
zipcodes <- xpathSApply(doc,"//li[@class = 'zipcode']", xmlValue)
zipcodes
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- htmlParse(xData)
zipcodes <- xpathSApply(doc,"//li[@class = 'zipcode']", xmlValue)
zipcodes = 21231
list()
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- htmlParse(xData)
zipcodes <- xpathSApply(doc,"//li[@class = 'zipcode']", xmlValue)
zipcodes
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- htmlTreeParse(xData, useInternal = TRUE)
zipcodes <- xpathSApply(doc,"//li[@class = 'zipcode']", xmlValue)
zipcodes
install.packages(bitops)
install.packages("bitops")
install.packages("bitops")
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- htmlTreeParse(xData, useInternal = TRUE)
zipcodes <- xpathSApply(doc,"//li[@class = 'zipcode']", xmlValue)
zipcodes
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- htmlTreeParse(xData, useInternal = TRUE)
zipcodes <- xpathSApply(doc,"//li[@catigory = 'zipcode']", xmlValue)
zipcodes
oauth_endpoints("github")
#
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
#
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
color()
for (Date 01/02/2007 : 02/02/2007) {
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.table(filename)
hist(Global_active_power)
for (Date as.Date(1/02/2007) : as.Date(2/02/2007)) {
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.table(filename, header=TRUE)
hist(Global_active_power)
for (Date as.Date(1/02/2007) : as.Date(2/02/2007)) {
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.table(filename, header=TRUE)
hist("Global_active_power")
for (Date as.Date(1/02/2007) : as.Date(2/02/2007)) {
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.csv(filename, header=TRUE)
hist(Global_active_power)
}
for as.Date(1/02/2007) : as.Date(2/02/2007) {
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.csv(filename, header=TRUE)
hist(Global_active_power)
end
}
id = as.Date(1/02/2007) : as.Date(2/02/2007)
for(i in id)  {
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.csv(filename, header=TRUE)
hist(Global_active_power)
}
for(i in as.Date(1/02/2007) : as.Date(2/02/2007))  {
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.csv(filename, header=TRUE)
hist(Global_active_power)
}
rowindex <- as.Date(1/02/2007) : as.Date(2/02/2007)
rowindex <- as.numeric(01/02/2007) : as.numeric(02/02/2007)
for(i in )  {
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.csv(filename, header=TRUE)
head(data)
hist(Global_active_power)
rowindex <- as.numeric(01/02/2007) : as.numeric(02/02/2007)
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.csv(filename, rowIndex=rowIndex, header=TRUE)
head(data)
dat <- data[!is.?(data)]
hist(dat,Global_active_power)
if (Date == 01/02/2007 and Date == 02/02/2007) {
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
data <- read.csv(filename, header=TRUE)
head(data)
dat <- data[!is.na(data)]
hist(dat,Global_active_power)
}
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
if (Date == 01/02/2007 and Date == 02/02/2007) {
data <- read.csv(filename, header=TRUE)
head(data)
dat <- data[!is.na(data)]
hist(dat,Global_active_power)
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
if (Date == as.number(01/02/2007) and Date == as.number(02/02/2007) {
data <- read.csv(filename, sep = ",", header=TRUE)
dat <- data[!is.na(data)]
hist(dat,Global_active_power)
}
filename <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
if (Date == as.number(01/02/2007) and Date == as.number(02/02/2007) {
data <- read.csv(filename,  header=TRUE)
dat <- data[!is.na(data)]
hist(dat,Global_active_power)
View(data)
View(data)
View(data)
View(data)
data(mtcars)
head(mtcars)
t.test(mpg ~ factor(am), data = mtcars)
best.model <- lm(mpg ~ ., data = mtcars)
adjust.var <- step(best.model, direction="backward", k=2, trace=0)
summary(adjust.var)
base.model <- lm(mpg ~ factor(am), data = mtcars)
adjust.model <- lm(mpg ~ factor(am) + wt + qsec, data = mtcars)
anova(base.model, adjust.model)
qqnorm(residuals(adjust.model))
qqline(residuals(adjust.model))
par(mfrow = c(2,2))
plot(adjust.model)
qqnorm(residuals(adjust.model))
qqline(residuals(adjust.model))
qqnorm(residuals(adjust.model))
qqline(residuals(adjust.model))
lambda = 0.2
n = 40
nsims = 1:1000
set.seed(820)
means <- data.frame(x = sapply(nsims, function(x) {mean(rexp(n, lambda))}))
head(means)
lambda = 0.2
n = 40
nsims = 1:1000
set.seed(500)
means <- data.frame(x = sapply(nsims, function(x) {mean(rexp(n, lambda))}))
head(means)
lambda = 0.2
n = 40
nsims = 1:1000
set.seed(500)
average <- data.frame(x = sapply(nsims, function(x) {mean(rexp(n, lambda))}))
head(maverage)
lambda = 0.2
n = 40
nsims = 1:1000
set.seed(500)
average <- data.frame(x = sapply(nsims, function(x) {mean(rexp(n, lambda))}))
head(average)
mean(avearge)
mean(x$avearge)
mean(x$average)
mean(average$x)
library(ggplot2)
ggplot(data = averages, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'),
binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(avaerages$x)))
lambda = 0.2
n = 40
nsims = 1:1000
set.seed(500)
averages <- data.frame(x = sapply(nsims, function(x) {mean(rexp(n, lambda))}))
head(averages)
library(ggplot2)
ggplot(data = averages, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'),
binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(avaerages$x)))
library(ggplot2)
ggplot(data = averages, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'),
binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(averages$x)))
mean(averages$x) + c(-1,1)*1.96*sd(averages$x)/sqrt(nrow(averages))
data(ToothGrowth)
head(ToothGrowth)
hist(ToothGrowth$len)
hist(ToothGrowth$supp)
table(ToothGrowth$supp)
table(ToothGrowth$dose)
?ToothGrowth
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
t.test(OJ, VC, dose = 0.5)
t.test(len, supp, dose = 0.5)
t.test(ToothGrowth$len, ToothGrowth$supp, dose = 0.5)
t.test(ToothGrowth$len, ToothGrowth$supp, dose = 0.5, paired=TRUE)
t.test(ToothGrowth$len ~ ToothGrowth$supp, dose == 0.5, paired=TRUE)
t.test(len ~ supp, dose == 0.5, paired=TRUE, data = ToothGrowth)
t.test(len ~ supp, dose == 1, paired=TRUE, data = ToothGrowth)
t.test(len ~ supp, dose == 2, paired=TRUE, data = ToothGrowth)
t.test(len ~ dose, supp == "OJ", paired=TRUE, data = ToothGrowth)
t.test(len ~ dose, supp == OJ, paired=TRUE, data = ToothGrowth)
t.test(len ~ dose, supp == "OJ", paired=TRUE, data = ToothGrowth)
t.test(len ~ (extra(dose == 0.5) & extra(dose == 1)), supp == "OJ", paired=TRUE, data = ToothGrowth)
t.test(len ~ (dose == 0.5 & dose == 1), supp == "OJ", paired=TRUE, data = ToothGrowth)
t.test(len ~ dose, supp == "OJ", paired=TRUE, data = subset(ToothGrowth, dose!= 2))
t.test(len ~ dose, paired=TRUE, data = subset(ToothGrowth, dose!= 2))
t.test(len ~ dose, supp == "OJ", paired=TRUE, data = subset(ToothGrowth, dose!= 2))
t.test(len ~ dose, supp == "VC", paired=TRUE, data = subset(ToothGrowth, dose!= 2))
t.test(len ~ dose, paired=TRUE, data = subset(ToothGrowth, dose!= 2))
t.test(len ~ dose, supp = "OJ", paired=TRUE, data = subset(ToothGrowth, dose!= 2))
t.test(len ~ dose, supp = "OJ", paired=TRUE, data = subset(ToothGrowth, dose!= 0.5))
t.test(len ~ dose, supp = "OJ", paired=TRUE, data = subset(ToothGrowth, dose!= 1))
t.test(len ~ dose, supp = "VC", paired=TRUE, data = subset(ToothGrowth, dose!= 2))
t.test(len ~ dose, supp = "VC", paired=TRUE, data = subset(ToothGrowth, dose!= 0.5))
t.test(len ~ dose, supp = "VC", paired=TRUE, data = subset(ToothGrowth, dose!= 1))
?ToothGrowth
library("gbm", lib.loc="~/R/win-library/3.1")
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
library("caret", lib.loc="~/R/win-library/3.1")
library("gtools", lib.loc="~/R/win-library/3.1")
library("latticeExtra", lib.loc="~/R/win-library/3.1")
library("randomForest", lib.loc="~/R/win-library/3.1")
library("rpart", lib.loc="~/R/win-library/3.1")
library("codetools", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("MASS", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("lattice", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("stats4", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages(c("formatR", "Hmisc", "htmltools", "labeling", "markdown"))
install.packages("e1071")
install.packages("e1071")
library("acepack", lib.loc="~/R/win-library/3.1")
install.packages('e1071', type='source')
library(e1071)
setwd("c:/RCourse/shiny")
library(shiny)
runApp()
